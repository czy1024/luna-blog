(window.webpackJsonp=window.webpackJsonp||[]).push([[139],{688:function(a,s,t){"use strict";t.r(s);var n=t(7),e=Object(n.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[a._v(" \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 以秒为标准时间的毫秒数\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("long")]),a._v(" MILLIS_PER_SECOND "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1000")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     *以分钟为标准时间的毫秒数\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("long")]),a._v(" MILLIS_PER_MINUTE "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("60")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" MILLIS_PER_SECOND\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     *以小时为标准时间的毫秒数\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("long")]),a._v(" MILLIS_PER_HOUR "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("60")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" MILLIS_PER_MINUTE\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 以天为标准时间的毫秒数\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("long")]),a._v(" MILLIS_PER_DAY "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("24")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" MILLIS_PER_HOUR\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 这个类型是半个月， 所以这可以代表日期是上还是下半个月 。\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" SEMI_MONTH "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1001")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 周范围， 从星期日开始 。\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" RANGE_WEEK_SUNDAY "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 周范围，从星期一开始 。\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" RANGE_WEEK_MONDAY "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 周范围，从关注的那天开始。\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" RANGE_WEEK_RELATIVE "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 周范围，以关注的天为中心。\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" RANGE_WEEK_CENTER "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v("\n     "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 月范围，从星期日开始 。\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" RANGE_MONTH_SUNDAY "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 月范围，从星期一开始 。\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" RANGE_MONTH_MONDAY "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("6")]),a._v("\n     "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 不应在标准编成构造获取实列， 而应该直接使用类中的静态方法，如：DateUtils.parseDate(str) 。\n     * 此构造函数意在允许需要一个javabeen实列的工具中使用 。  \n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("DateUtils")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 判断两个日期时间是否是同一天 。\n     *\n     * @param date1  第一个日期，不可修改，非null\n     * @param date2  第二个日期，不可修改，非null\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("boolean")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("isSameDay")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" date1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" date2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 判断两个日历时间是否是同一天 。   \n     *\n     * @param cal1  第一个日历，不可修改，非null\n     * @param cal2  第二个日历，不可修改，非null\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("boolean")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("isSameDay")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Calendar")]),a._v(" cal1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Calendar")]),a._v(" cal2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 判断两个日期是否相同\n     * 这种方法比较两个对象的毫秒时间 \n     *\n     * @param date1  第一个日期，不可修改，非null\n     * @param date2  第二个日期，不可修改，非null\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("boolean")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("isSameInstant")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" date1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" date2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 判断两个日历是否相同\n     * 这种方法比较两个对象的毫秒时间 \n     *\n     * @param cal1  第一个日历，不可修改，非null\n     * @param cal2  第二个日历，不可修改，非null\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("boolean")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("isSameInstant")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Calendar")]),a._v(" cal1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Calendar")]),a._v(" cal2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 判断两个日历本地时间是否相同\n     * 除了比较数值外两个日历对象的类型还要相同\n     *\n     * @param cal1  第一个日历，不可修改，非null\n     * @param cal2  第二个日历，不可修改，非null\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("boolean")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("isSameLocalTime")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Calendar")]),a._v(" cal1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Calendar")]),a._v(" cal2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 尝试用parsePatterns中各种不同的日期格式解析代表时间的字符串str 。\n     * \n     * 解析时会逐个使用parsePatterns中的格式，如果都没有匹配上， 则抛出异常ParseException 。\n     * \n     * @param str  被解析的时间字符串，非null\n     * @param parsePatterns  用于解析str的时间格式，有一个或几个，非null\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("parseDate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" str"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v(" parsePatterns"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ParseException")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 尝试用parsePatterns中各种不同的日期格式解析代表时间的字符串str 。\n     * 解析时会使用给定的日期格式符locale 。\n     * \n     * 解析时会逐个使用parsePatterns中的格式，如果都没有匹配上， 则抛出异常ParseException 。\n     * \n     * @param str  被解析的时间字符串，非null\n     * @param locale 使用locale中的日期格式符，如果为null，则使用系统默认的locale\n     * @param parsePatterns  用于解析str的时间格式，有一个或几个，非null\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("parseDate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" str"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Locale")]),a._v(" locale"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v(" parsePatterns"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ParseException")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v('/**\n     * 尝试用parsePatterns中各种不同的日期格式解析代表时间的字符串str 。\n     *\n     * 解析时会逐个使用parsePatterns中的格式，如果都没有匹配上， 则抛出异常ParseException 。\n     * 解析器解析严格不允许的日期， 如："February 942, 1996" 。\n     * \n     * @param str  被解析的时间字符串，非null\n     * @param parsePatterns  用于解析str的时间格式，有一个或几个，非null\n     */')]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("parseDateStrictly")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" str"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v(" parsePatterns"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ParseException")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v('/**\n     * 尝试用parsePatterns中各种不同的日期格式解析代表时间的字符串str 。\n     * 解析时会使用给定的日期格式符locale 。\n     *\n     * 解析时会逐个使用parsePatterns中的格式，如果都没有匹配上， 则抛出异常ParseException 。\n     * 解析器解析严格不允许的日期， 如："February 942, 1996" 。\n     * \n     * @param str  被解析的时间字符串，非null\n     * @param locale 使用locale中的日期格式符，如果为null，则使用系统默认的locale\n     * @param parsePatterns  用于解析str的时间格式，有一个或几个，非null\n     */')]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("parseDateStrictly")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" str"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Locale")]),a._v(" locale"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v(" parsePatterns"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ParseException")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 在日期date上增加amount年 。\n     *\n     * @param date  处理的日期，非null\n     * @param amount  要加的年数，可能为负数\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("addYears")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" date"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" amount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 在日期date上增加amount月 。\n     *\n     * @param date  处理的日期，非null\n     * @param amount  要加的月数，可能为负数\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("addMonths")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" date"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" amount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 在日期date上增加amount周 。\n     *\n     * @param date  处理的日期，非null\n     * @param amount  要加的周数，可能为负数\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("addWeeks")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" date"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" amount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 在日期date上增加amount天 。\n     *\n     * @param date  处理的日期，非null\n     * @param amount  要加的天数，可能为负数\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("addDays")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" date"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" amount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 在日期date上增加amount小时 。\n     *\n     * @param date  处理的日期，非null\n     * @param amount  要加的小时数，可能为负数\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("addHours")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" date"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" amount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 在日期date上增加amount分钟 。\n     *\n     * @param date  处理的日期，非null\n     * @param amount  要加的分钟数，可能为负数\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("addMinutes")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" date"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" amount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 在日期date上增加amount秒 。\n     *\n     * @param date  处理的日期，非null\n     * @param amount  要加的秒数，可能为负数\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("addSeconds")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" date"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" amount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 在日期date上增加amount 毫秒 。\n     *\n     * @param date  处理的日期，非null\n     * @param amount  要加的毫秒数，可能为负数\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("addMilliseconds")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" date"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" amount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n     "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 给日期data设置一个新的年份 。\n     *\n     * @param date 处理的日期，非null\n     * @param amount 要设置的年份\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("setYears")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" date"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" amount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n     "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 给日期data设置一个新的月份 。\n     *\n     * @param date 处理的日期，非null\n     * @param amount 要设置的月份\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("setMonths")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" date"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" amount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 给日期data设置一个新的天 。\n     *\n     * @param date 处理的日期，非null\n     * @param amount 要设置的天\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("setDays")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" date"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" amount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 给日期data设置一个新的小时 。\n     *\n     * @param date 处理的日期，非null\n     * @param amount 要设置的小时\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("setHours")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" date"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" amount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n     "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 给日期data设置一个新的分钟 。\n     *\n     * @param date 处理的日期，非null\n     * @param amount 要设置的分钟\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("setMinutes")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" date"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" amount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 给日期data设置一个新的秒 。\n     *\n     * @param date 处理的日期，非null\n     * @param amount 要设置的秒\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("setSeconds")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" date"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" amount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 给日期data设置一个新的毫秒 。\n     *\n     * @param date 处理的日期，非null\n     * @param amount 要设置的毫秒\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("setMilliseconds")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" date"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" amount"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 将一个日期放到日历中 。\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Calendar")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("toCalendar")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" date"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 根据阈值field四舍五入日历date 。\n     *\n     * 例如， 如果你的时间是 28 Mar 2002 13:45:01.231，\n     * 如果field为HOUR，它将返回 28 Mar 2002 14:00:00.000；\n     * 如果field为MONTH，它将返回 1 April 2002 0:00:00.000 。\n     * \n     * @param date  处理的日期，非null\n     * @param field  阈值\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("round")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" date"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" field"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 根据阈值field四舍五入日历date 。\n     *\n     * 例如， 如果你的时间是 28 Mar 2002 13:45:01.231，\n     * 如果field为HOUR，它将返回 28 Mar 2002 14:00:00.000；\n     * 如果field为MONTH，它将返回 1 April 2002 0:00:00.000 。\n     * \n     * @param date  处理的日期，非null\n     * @param field  阈值  \n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Calendar")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("round")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Calendar")]),a._v(" date"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" field"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 根据阈值field四舍五入日历date 。\n     *\n     * 例如， 如果你的时间是 28 Mar 2002 13:45:01.231，\n     * 如果field为HOUR，它将返回 28 Mar 2002 14:00:00.000；\n     * 如果field为MONTH，它将返回 1 April 2002 0:00:00.000 。\n     * \n     * @param date  处理的日期，非null\n     * @param field  阈值 \n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("round")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" date"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" field"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 根据阈值field截取日期date 。\n     *\n     * 例如， 如果你的时间是 28 Mar 2002 13:45:01.231，\n     * 如果field为HOUR，它将返回 28 Mar 2002 13:00:00.000；\n     * 如果field为MONTH，它将返回 1 Mar 2002 0:00:00.000 。\n     * \n     * @param date  处理的日期，非null\n     * @param field  阈值 \n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("truncate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" date"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" field"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n     "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 根据阈值field截取日历date 。\n     *\n     * 例如， 如果你的时间是 28 Mar 2002 13:45:01.231，\n     * 如果field为HOUR，它将返回 28 Mar 2002 13:00:00.000；\n     * 如果field为MONTH，它将返回 1 Mar 2002 0:00:00.000 。\n     * \n     * @param date  处理的日期，非null\n     * @param field  阈值\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Calendar")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("truncate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Calendar")]),a._v(" date"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" field"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 根据阈值field截取日期date 。\n     *\n     * 例如， 如果你的时间是 28 Mar 2002 13:45:01.231，\n     * 如果field为HOUR，它将返回 28 Mar 2002 13:00:00.000；\n     * 如果field为MONTH，它将返回 1 Mar 2002 0:00:00.000 。\n     * \n     * @param date  处理的日期，非null\n     * @param field  阈值\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("truncate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" date"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" field"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 根据阈值field向上舍入日期date 。\n     *\n     * 例如， 如果你的时间是 28 Mar 2002 13:45:01.231，\n     * 如果field为HOUR，它将返回 28 Mar 2002 14:00:00.000；\n     * 如果field为MONTH，它将返回 1 Apr 2002 0:00:00.000 。\n     * \n     * @param date  处理的日期，非null\n     * @param field  阈值\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ceiling")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" date"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" field"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 根据阈值field向上舍入日期date 。\n     *\n     * 例如， 如果你的时间是 28 Mar 2002 13:45:01.231，\n     * 如果field为HOUR，它将返回 28 Mar 2002 14:00:00.000；\n     * 如果field为MONTH，它将返回 1 Apr 2002 0:00:00.000 。\n     * \n     * @param date  处理的日期，非null\n     * @param field  阈值\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Calendar")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ceiling")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Calendar")]),a._v(" date"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" field"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 根据阈值field向上舍入日期date 。\n     *\n     * 例如， 如果你的时间是 28 Mar 2002 13:45:01.231，\n     * 如果field为HOUR，它将返回 28 Mar 2002 14:00:00.000；\n     * 如果field为MONTH，它将返回 1 Apr 2002 0:00:00.000 。\n     * \n     * @param date  处理的日期，非null\n     * @param field  阈值\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ceiling")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" date"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" field"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 根据指定的时间focus和范围类型rangeStyle构建一个时间范围迭代器 。\n     *\n     * 如传入的时间是Thursday, July 4, 2002，范围类型是RANGE_MONTH_SUNDAY，\n     * 则返回迭代器的范围是从Sunday, June 30, 2002 到 Saturday, August 3, 2002\n     *\n     * @param focus  指定的时间\n     * @param rangeStyle  范围类型，值必须是如下之一：\n     * DateUtils.RANGE_MONTH_SUNDAY， \n     * DateUtils.RANGE_MONTH_MONDAY，\n     * DateUtils.RANGE_WEEK_SUNDAY，\n     * DateUtils.RANGE_WEEK_MONDAY，\n     * DateUtils.RANGE_WEEK_RELATIVE，\n     * DateUtils.RANGE_WEEK_CENTER\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Iterator")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Calendar")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("iterator")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" focus"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" rangeStyle"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 根据指定的时间focus和范围类型rangeStyle构建一个时间范围迭代器 。\n     *\n     * 如传入的时间是Thursday, July 4, 2002，范围类型是RANGE_MONTH_SUNDAY，\n     * 则返回迭代器的范围是从Sunday, June 30, 2002 到 Saturday, August 3, 2002\n     *\n     * @param focus  指定的时间\n     * @param rangeStyle  范围类型，值必须是如下之一：\n     * DateUtils.RANGE_MONTH_SUNDAY， \n     * DateUtils.RANGE_MONTH_MONDAY，\n     * DateUtils.RANGE_WEEK_SUNDAY，\n     * DateUtils.RANGE_WEEK_MONDAY，\n     * DateUtils.RANGE_WEEK_RELATIVE，\n     * DateUtils.RANGE_WEEK_CENTER\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Iterator")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Calendar")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("iterator")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Calendar")]),a._v(" focus"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" rangeStyle"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 根据指定的时间focus和范围类型rangeStyle构建一个时间范围迭代器 。\n     *\n     * 如传入的时间是Thursday, July 4, 2002，范围类型是RANGE_MONTH_SUNDAY，\n     * 则返回迭代器的范围是从Sunday, June 30, 2002 到 Saturday, August 3, 2002\n     *\n     * @param focus  指定的时间\n     * @param rangeStyle  范围类型，值必须是iterator(Calendar, int)方法注释中列出的\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Iterator")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("iterator")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" focus"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" rangeStyle"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 返回指定分段内的毫秒数 。 所有大于分段的DateFields将被忽略 。\n     *\n     * 请求任何日期毫秒，将返回当前秒的毫秒数 (返回一个数字在0和999之间) 。\n     * 有效的分段值是： Calendar.YEAR、Calendar.MONTH、Calendar.DAY_OF_YEAR、\n     * Calendar.DATE、Calendar.HOUR_OF_DAY、Calendar.MINUTE、\n     * Calendar.SECOND 和 Calendar.MILLISECOND\n     * 分段值小于或等于MILLISECOND，将返回0 。\n     * \n     *  January 1, 2008 7:15:10.538 with Calendar.SECOND as fragment will return 538\n     *  January 6, 2008 7:15:10.538 with Calendar.SECOND as fragment will return 538\n     *  January 6, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10538\n     *  January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0\n     *   (a millisecond cannot be split in milliseconds)\n     * \n     * @param calendar 获取值得日历对象，非null\n     * @param fragment 分段值\n     */")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("long")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getFragmentInMilliseconds")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Calendar")]),a._v(" calendar"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" fragment"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 返回指定分段内的秒数 。 所有大于分段的DateFields将被忽略 。\n     *\n     * 请求任何日期秒，将返回当前的分钟的秒数 (返回一个数字在0和59之间) 。\n     * 有效的分段值是： Calendar.YEAR、Calendar.MONTH、Calendar.DAY_OF_YEAR、\n     * Calendar.DATE、Calendar.HOUR_OF_DAY、Calendar.MINUTE、\n     * Calendar.SECOND 和 Calendar.MILLISECOND\n     * 分段值小于或等于SECOND，将返回0 。\n     * \n     *  January 1, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10\n     *  January 6, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10\n     *  January 6, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 26110\n     *   (7*3600 + 15*60 + 10)</li>\n     *  January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0\n     * \n     * @param calendar 获取值得日历对象，非null\n     * @param fragment 分段值\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("long")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getFragmentInSeconds")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Calendar")]),a._v(" calendar"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" fragment"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 返回指定分段内的分钟数 。 所有大于分段的DateFields将被忽略 。\n     *\n     * 请求任何日期分钟，将返回当前的小时的分钟数 (返回一个数字在0和59之间)\n     * 有效的分段值是： Calendar.YEAR、Calendar.MONTH、Calendar.DAY_OF_YEAR、\n     * Calendar.DATE、Calendar.HOUR_OF_DAY、Calendar.MINUTE、\n     * Calendar.SECOND 和 Calendar.MILLISECOND\n     * 分段值小于或等于MINUTE，将返回0 。\n     * \n     *  January 1, 2008 7:15:10.538 with Calendar.HOUR_OF_DAY as fragment will return 15\n     *  January 6, 2008 7:15:10.538 with Calendar.HOUR_OF_DAY as fragment will return 15\n     *  January 1, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 15\n     *  January 6, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 435 (7*60 + 15)\n     *  January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0\n     * \n     * @param calendar 获取值得日历对象，非null\n     * @param fragment 分段值\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("long")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getFragmentInMinutes")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Calendar")]),a._v(" calendar"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" fragment"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 返回指定分段内的小时数 。 所有大于分段的DateFields将被忽略 。\n     *\n     * 请求任何日期小时，将返回当前的天的小时数 (返回一个数字在0和23之间) 。\n     * 有效的分段值是： Calendar.YEAR、Calendar.MONTH、Calendar.DAY_OF_YEAR、\n     * Calendar.DATE、Calendar.HOUR_OF_DAY、Calendar.MINUTE、\n     * Calendar.SECOND 和 Calendar.MILLISECOND\n     * 分段值小于或等于HOUR_OF_DAY，将返回0 。\n     *  \n     *  January 1, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 7\n     *  January 6, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 7\n     *  January 1, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 7\n     *  January 6, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 127 (5*24 + 7)\n     *  January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0\n     *  \n     * @param calendar 获取值得日历对象，非null\n     * @param fragment 分段值\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("long")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getFragmentInHours")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Calendar")]),a._v(" calendar"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" fragment"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 返回指定分段内的天数 。 所有大于分段的DateFields将被忽略 。\n     *\n     * 请求任何日期天数，将返回当前的月的天数 (返回一个数字在1和31之间) 。\n     * 有效的分段值是： Calendar.YEAR、Calendar.MONTH、Calendar.DAY_OF_YEAR、\n     * Calendar.DATE、Calendar.HOUR_OF_DAY、Calendar.MINUTE、\n     * Calendar.SECOND 和 Calendar.MILLISECOND\n     * 分段值小于或等于DATE，将返回0 。\n     * \n     *  January 28, 2008 with Calendar.MONTH as fragment will return 28\n     *  February 28, 2008 with Calendar.MONTH as fragment will return 28\n     *  January 28, 2008 with Calendar.YEAR as fragment will return 28\n     *  February 28, 2008 with Calendar.YEAR as fragment will return 59\n     *  January 28, 2008 with Calendar.MILLISECOND as fragment will return 0\n     * \n     * @param calendar 获取值得日历对象，非null\n     * @param fragment 分段值\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("long")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getFragmentInDays")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Calendar")]),a._v(" calendar"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" fragment"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 截取比较两个日历对象的field处的值是否相同 。\n     * \n     * @param cal1 第一个日历对象，非null\n     * @param cal2 第二个日历对象，非null\n     * @param field Calendar中的阈值\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("boolean")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("truncatedEquals")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Calendar")]),a._v(" cal1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Calendar")]),a._v(" cal2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" field"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 截取比较两个日期对象的field处的值是否相同 。\n     * \n     * @param date1 第一个日期对象，非null\n     * @param date2 第二个日期对象，非null\n     * @param field Calendar中的阈值\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("boolean")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("truncatedEquals")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" date1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" date2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" field"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 截取比较两个日历对象的field处的值 。\n     * 如果第一个日历小于、等于、大于第二个，则对应返回负整数、0、正整数\n     * \n     * @param cal1 第一个日历对象，非null\n     * @param cal2 第二个日历对象，非null\n     * @param field Calendar中的阈值\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("truncatedCompareTo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Calendar")]),a._v(" cal1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Calendar")]),a._v(" cal2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" field"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 截取比较断两个日期对象的field处的值 。\n     * 如果第一个日期小于、等于、大于第二个，则对应返回负整数、0、正整数\n     * \n     * @param date1 第一个日期对象，非null\n     * @param date2 第二个日期对象，非null\n     * @param field Calendar中的阈值\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("truncatedCompareTo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" date1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Date")]),a._v(" date2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" field"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);